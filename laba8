import tkinter as tk
from tkinter import Canvas, messagebox
import random

class SemiCircle:
    def __init__(self, x, y, radius, color, angle=0):
        self.x = x
        self.y = y
        self.radius = radius
        self.color = color
        self.angle = angle

    def draw(self, canvas):
        start_angle = self.angle
        extent = 180
        canvas.create_arc(
            self.x - self.radius,
            self.y - self.radius,
            self.x + self.radius,
            self.y + self.radius,
            start=start_angle,
            extent=extent,
            fill=self.color
        )

    def rotate(self, angle):
        self.angle = (self.angle + angle) % 360

    def change_color(self, new_color):
        self.color = new_color

    def move(self, dx, dy):
        self.x += dx
        self.y += dy

class App:
    def __init__(self, root):
        self.root = root
        self.root.title("Полукруги")
        self.canvas = Canvas(root, width=600, height=400, bg='white')
        self.canvas.pack()

        self.semicircles = []
        self.current_index = 0

        self.load_data()
        self.visualize()

        self.root.bind("<Left>", self.rotate_left)
        self.root.bind("<Right>", self.rotate_right)
        self.root.bind("<Up>", self.move_up)
        self.root.bind("<Down>", self.move_down)

        self.create_buttons()

    def load_data(self):
        try:
            with open('semicircles.txt', 'r') as file:
                for line in file:
                    parts = line.split(',')
                    if len(parts) == 4:
                        x, y, radius, color = parts
                        semicircle = SemiCircle(float(x), float(y), float(radius), color.strip())
                        self.semicircles.append(semicircle)
        except Exception as e:
            messagebox.showerror("Ошибка", f"Ошибка чтения файла: {e}")

    def visualize(self):
        self.canvas.delete("all")
        for semicircle in self.semicircles:
            semicircle.draw(self.canvas)

    def rotate_left(self, event):
        if self.semicircles:
            self.semicircles[self.current_index].rotate(-10)
            self.visualize()

    def rotate_right(self, event):
        if self.semicircles:
            self.semicircles[self.current_index].rotate(10)
            self.visualize()

    def move_up(self, event):
        if self.semicircles:
            self.semicircles[self.current_index].move(0, -10)
            self.visualize()

    def move_down(self, event):
        if self.semicircles:
            self.semicircles[self.current_index].move(0, 10)
            self.visualize()

    def move_left(self, event):
        if self.semicircles:
            self.semicircles[self.current_index].move(-10, 0)
            self.visualize()

    def move_right(self, event):
        if self.semicircles:
            self.semicircles[self.current_index].move(10, 0)
            self.visualize()

    def create_buttons(self):
        button_frame = tk.Frame(self.root)
        button_frame.pack()

        color_button = tk.Button(button_frame, text="Изменить цвет", command=self.change_color)
        color_button.pack(side=tk.LEFT)

        delete_button = tk.Button(button_frame, text="Удалить", command=self.delete_semicircle)
        delete_button.pack(side=tk.LEFT)

        add_button = tk.Button(button_frame, text="Добавить", command=self.add_semicircle)
        add_button.pack(side=tk.LEFT)

        next_button = tk.Button(button_frame, text="Следующий", command=self.next_semicircle)
        next_button.pack(side=tk.LEFT)

        prev_button = tk.Button(button_frame, text="Предыдущий", command=self.prev_semicircle)
        prev_button.pack(side=tk.LEFT)

    def change_color(self):
        if self.semicircles:
            colors = ['red', 'blue', 'green', 'yellow', 'purple']
            current_color = self.semicircles[self.current_index].color
            new_color = colors[(colors.index(current_color) + 1) % len(colors)]
            self.semicircles[self.current_index].change_color(new_color)
            self.visualize()

    def delete_semicircle(self):
        if self.semicircles:
            del self.semicircles[self.current_index]
            self.current_index = max(0, self.current_index - 1)
            self.visualize()

    def add_semicircle(self):
        x = random.randint(50, 550)
        y = random.randint(50, 350)
        radius = random.randint(30, 70)
        color = random.choice(['red', 'blue', 'green', 'yellow', 'purple'])
        semicircle = SemiCircle(x, y, radius, color)
        self.semicircles.append(semicircle)
        self.current_index = len(self.semicircles) - 1
        self.visualize()

    def next_semicircle(self):
        if self.semicircles:
            self.current_index = (self.current_index + 1) % len(self.semicircles)
            self.visualize()

    def prev_semicircle(self):
        if self.semicircles:
            self.current_index = (self.current_index - 1) % len(self.semicircles)
            self.visualize()

if __name__ == "__main__":
    root = tk.Tk()
    app = App(root)
    root.mainloop()
